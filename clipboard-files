#!/bin/bash

# clipboard-files - Cut, copy and paste files from the clipboard in a Linux terminal.
#
# Read more: https://github.com/larspontoppidan/clipboard-files
#
# By Lars Ole Pontoppidan
#
# Clipboard interfacing code inspired from:
# http://murga-linux.com/puppy/viewtopic.php?t=111880&start=15
#

SCRIPT_REV=2019-05-14

function syntax_error {
  echo "$(basename -- $0): Invalid command line"
  echo "Try 'clipboard-files' for help"
}

function show_help {
  echo "clipboard-files - cut, copy and paste files from clipboard, rev. $SCRIPT_REV"
  echo ""
  echo "Usage:"
  echo "  ccut FILE [FILE]...   Cut files or folders to clipboard"
  echo "  ccopy FILE [FILE]...  Copy files or folders to clipboard"
  echo "  cpaste                Paste from clipboard to current dir"
  echo "  cshow                 Show files on clipboard"
  echo "  cclear                Clear clipboard without any file operations"
  echo "  . ccd                 cd to the folder of the 1st file on clipboard"
  echo ""
  echo "If the usage commands aren't working check the installation steps provided here:"
  echo "https://github.com/larspontoppidan/clipboard-files"
  echo ""
}

# Is this script being sourced?
if [[ -z $BASH_SOURCE ]] || [[ $(basename ${0#-}) != ${BASH_SOURCE##*/} ]]; then
  # Being sourced
  sourced=true
  EXIT=return
else
  # Running directly
  sourced=false
  EXIT=exit
fi

if [[ $0 == *"ccopy" ]]; then
  op=copy
elif [[ $0 == *"ccut" ]]; then
  op=cut
elif [[ $0 == *"cpaste" ]]; then
  op=paste
elif [[ $0 == *"cshow" ]]; then
  op=show
elif [[ $0 == *"cclear" ]]; then
  op=clear
elif [[ $sourced == true ]]; then
  # When this is sourced, assume ccd
  op=cd
else
  show_help
  $EXIT
fi

if [[ $XDG_CURRENT_DESKTOP == *"MATE"* ]]; then
  cb_target=x-special/mate-copied-files
elif [[ $XDG_CURRENT_DESKTOP == *"GNOME"* ]]; then
  cb_target=x-special/gnome-copied-files
elif [[ $XDG_CURRENT_DESKTOP == *"XFCE"* ]]; then
  cb_target=x-special/gnome-copied-files
elif [[ $XDG_CURRENT_DESKTOP == *"Unity"* ]]; then
  cb_target=x-special/gnome-copied-files
elif [[ $XDG_CURRENT_DESKTOP == *"KDE"* ]]; then
  cb_target=x-special/KDE-copied-files
else
  echo "Unsupported desktop environment: '${XDG_CURRENT_DESKTOP}', exiting"
  $EXIT
fi

xclip -version 1>/dev/null 2>/dev/null
result=$?
if [ $result != 0 ]; then
  echo "xclip doesn't seem to be installed, exiting"
  $EXIT
fi

if [ "${op}" = paste ] || [ "${op}" = show ] || [ "${op}" = cd ]; then
  if [ $# -ne 0 ]; then
    syntax_error
    $EXIT
  fi

  raw=$(xclip -o -selection clipboard -t ${cb_target} 2>/dev/null)
  result=$?

  if [ $result != 0 ] || [ ${#raw} == 0 ]; then
    echo "No files on clipboard"
    $EXIT
  fi

  urldecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }

  filelist=$(urldecode "$raw")
  carriage_return=$(echo -ne '\r')

  first=true
  while read line
  do
     line=${line//${carriage_return}/}

     if [ "$first" = true ]; then
       first=false
       paste_mode=$line
       if [ "${op}" = "show" ]; then
         echo "Operation: ${paste_mode}"
       elif [ "${op}" = "cd" ]; then
         true
       elif [ "${paste_mode}" = "cut" ]; then
         echo "Moving the following items(s) to current dir:"
       else
         echo "Copying the following items(s) to current dir:"
       fi
       continue
     fi

     if [[ $line == file:\/\/* ]]; then
       filename=${line#file:\/\/}
     else
       # certain programs may add the file path to the clipboard
       # with the "file:" prefix, instead of "file://"
       filename=${line#file:}
     fi
     
     if [ "${op}" = cd ]; then
       path=$(dirname -- "${filename}")
       cd "${path}"
       break
     fi

     echo ${filename}

     if [ "${op}" != show ]; then
       if [ -e "${filename}" ]; then
         if [ "${paste_mode}" = "cut" ]; then
           mv -f "${filename}" .
         else
           cp -af --no-preserve=context,links "${filename}" .
         fi
       else
         echo "File doesn't exist or error: ${filename}"
       fi
     fi
  done <<< "${filelist}"

  if [ "${op}" = paste ] && [ "${paste_mode}" = "cut" ]; then
    echo -n | xclip -selection clipboard
  fi

elif [ "${op}" = copy ] || [ "${op}" = cut ]; then

  if [ $# -lt 1 ]; then
    syntax_error
    $EXIT
  fi

  if [ "${op}" = cut ]; then
    clipboard="cut"
  else
    clipboard="copy"
  fi

  count=0
  for one_arg in "$@"
  do
     if [[ ${one_arg} == -* ]]; then
       syntax_error
       $EXIT
     fi

     filename=$(realpath "${one_arg}")

     if [ -e "${filename}" ]; then
       clipboard="${clipboard}
file://${filename}"
       count=$((count+1))
     else
       echo "File doesn't exist or error: ${filename}"
     fi
  done

  if [ $count -ge 1 ]; then
    echo -n "${clipboard}" | xclip -i -selection clipboard -t ${cb_target}
    result=$?
    if [ $result != 0 ]; then
      echo "Error copying to clipboard"
    elif [ "${op}" = cut ]; then
      echo "${count} item(s) cut to clipboard"
    else
      echo "${count} item(s) copied to clipboard"
    fi
  fi

elif [ "${op}" = clear ]; then
  if [ $# -ne 0 ]; then
    syntax_error
    $EXIT
  fi

  echo -n | xclip -selection clipboard
  result=$?

  if [ $result != 0 ]; then
    echo "Error clearing clipboard"
  else
    echo "Clipboard cleared"
  fi
else
  syntax_error
fi


